plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.2'
	id 'io.spring.dependency-management' version '1.1.4'
	id "org.hidetake.ssh" version "2.11.2"
}

group = 'ru.riji'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.projectlombok:lombok:1.18.28'
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'com.ibm.mq:mq-jms-spring-boot-starter:3.0.3'
	implementation 'com.squareup.okhttp3:okhttp:4.9.3'
	implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect:3.2.1'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.xerial:sqlite-jdbc:3.45.1.0'
	implementation 'org.springframework:spring-jdbc:6.1.3'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.hibernate.orm:hibernate-community-dialects'
	annotationProcessor "org.projectlombok:lombok:1.18.28"
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

}

ssh.settings {
	knownHosts = allowAnyHosts

}

remotes {
	webServer {
		host = ''
		user = ''
		identity = file('C:\\Users\\svmok\\.ssh\\id_rsa')
	}
}

def remoteDir = '/opt/spring-boot/';
def remotePath = remoteDir + project.name + '-' + project.version + '.jar';

tasks.register("deploy") {
	doLast {
		ssh.run {
			session(remotes.webServer) {
				put from: buildDir.toString() + '/libs/' + project.name + '-' + project.version + '.jar', into: remoteDir
			}
		}
	}
}

tasks.register("start") {
	doLast {
		ssh.run {
			session(remotes.webServer) {
				execute 'nohup java -jar ' + remotePath + ' &'
			}
		}
	}
}

tasks.register("stop") {
	doLast {
		ssh.run {
			session(remotes.webServer) {
				String result = execute 'ps -ef | grep -v grep | grep ' + remotePath + ' | awk \'{print $2}\''
				if (result.length()!=0) {
					execute 'ps -ef | grep -v grep | grep ' + remotePath + ' | awk \'{print $2}\' | xargs kill -9'
				}
			}
		}
	}
}

tasks.register("remoteDeploy") {
	dependsOn (bootJar, deploy, stop, start)

}


tasks.named('test') {
	useJUnitPlatform()
}
